{"version":3,"sources":["helper.js","controllers/BudgetControl.js","controllers/Error.js","controllers/BudgetQuestion.js","controllers/Expense.js","controllers/ExpenseHistory.js","controllers/Form.js","App.js","serviceWorker.js","index.js"],"names":["reviewBudget","budget","amountLeft","BudgetControl","className","Error","message","BudgetQuestion","setBudget","setAmountLeft","setShowBudgetQuestion","useState","amount","setAmount","error","setError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Expense","expense","ExpenseHistory","expenses","map","key","id","Form","setNewExpense","setCreateExpense","setExpense","trim","shortid","generate","App","showBudgetQuestion","setExpenses","newExpense","createExpense","useEffect","budgetLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ae18afd8.chunk.js","sourcesContent":["export const reviewBudget = (budget, amountLeft) => {\r\n  let alerts;\r\n  if ((budget / 4) > amountLeft) {\r\n    alerts = 'alert alert-danger';\r\n  } else if ((budget / 2) > amountLeft) {\r\n    alerts = 'alert alert-warning';\r\n  } else {\r\n    alerts = 'alert alert-success';\r\n  }\r\n  return alerts;\r\n}","import React from 'react';\r\nimport { reviewBudget } from '../helper'\r\n\r\nconst BudgetControl = ({ budget, amountLeft }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"alert  alert-primary\">\r\n        Initial Budget: {budget}\r\n      </div>\r\n      <div className={reviewBudget(budget, amountLeft)}>\r\n        Current Balance: {amountLeft}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BudgetControl;","import React from 'react';\r\n\r\nconst Error = ({ message }) => {\r\n  return (\r\n    <p className=\"alert alert-danger error\">{message}</p>\r\n  );\r\n}\r\n\r\nexport default Error;","import React, { useState } from 'react';\r\nimport Error from './Error';\r\n\r\nconst BudgetQuestion = ({ setBudget, setAmountLeft, setShowBudgetQuestion }) => {\r\n\r\n  const [amount, setAmount] = useState(0);\r\n  const [error, setError] = useState(false);\r\n\r\n  const defineBudget = e => {\r\n    setAmount(parseInt(e.target.value, 10))\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (amount < 1 || isNaN(amount)) {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n    setBudget(amount);\r\n    setAmountLeft(amount);\r\n    setShowBudgetQuestion(false);\r\n  }\r\n  return (\r\n    <div>\r\n      <h2>Insert your Budget</h2>\r\n\r\n      <form\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <input\r\n          type=\"number\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Insert your Budget...\"\r\n          onChange={defineBudget}\r\n        />\r\n\r\n        <input\r\n          type=\"submit\"\r\n          className=\"button-primary u-full-width\"\r\n          value=\"Conitinue\"\r\n\r\n        />\r\n        {error ? <Error message=\"Invalid amount\" /> : null}\r\n\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BudgetQuestion;\r\n","\r\nimport React from 'react';\r\n\r\nconst Expense = ({ expense }) => {\r\n  return (\r\n    <li className=\"expenses\" >\r\n      <p>\r\n        {expense.expense}\r\n        <span className=\"expense\">Â£  {expense.amount}</span>\r\n\r\n      </p>\r\n    </li>\r\n\r\n  );\r\n}\r\n\r\nexport default Expense;","import React from 'react';\r\nimport Expense from './Expense';\r\n\r\nconst ExpenseHistory = ({ expenses }) => {\r\n  return (\r\n    <div className=\"expenses-incurred\">\r\n      <h2>Expense History</h2>\r\n\r\n      {\r\n        expenses.map(expense => (\r\n          <Expense\r\n            key={expense.id}\r\n            expense={expense}\r\n          />\r\n        ))\r\n\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseHistory;","import React, { useState } from 'react'\r\nimport Error from './Error';\r\nimport shortid from 'shortid';\r\n\r\nconst Form = ({ setNewExpense, setCreateExpense }) => {\r\n\r\n  const [expense, setExpense] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [error, setError] = useState(false);\r\n\r\n  const addExpense = e => {\r\n    e.preventDefault();\r\n\r\n    if (amount < 1 || isNaN(amount) || expense.trim() === '') {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n\r\n    const expenses = {\r\n      expense,\r\n      amount,\r\n      id: shortid.generate()\r\n    }\r\n\r\n    setNewExpense(expenses);\r\n    setCreateExpense(true);\r\n\r\n    setExpense('');\r\n    setAmount('');\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <form onSubmit={addExpense} >\r\n      <h2>Expenses</h2>\r\n\r\n      <div className=\"field\">\r\n        <label>Source of Expense</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Example: Transport, Rent...\"\r\n          value={expense}\r\n          onChange={e => setExpense(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"field\">\r\n        <label>Amount</label>\r\n        <input\r\n          type=\"number\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Example: 300...\"\r\n          value={amount}\r\n          onChange={e => setAmount(parseInt(e.target.value, 10))}\r\n        />\r\n      </div>\r\n      <input\r\n        type=\"submit\"\r\n        className=\"button-primary u-full-width\"\r\n        value=\"Add expense\"\r\n      />\r\n      {error ? <Error message=\"All Fields Are Required, Invalid Form\" /> : null}\r\n\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form;","import React, { useState, useEffect } from 'react';\nimport BudgetControl from './controllers/BudgetControl';\nimport BudgetQuestion from './controllers/BudgetQuestion';\nimport ExpenseHistory from './controllers/ExpenseHistory';\nimport Form from './controllers/Form';\n\nfunction App() {\n\n  const [budget, setBudget] = useState(0);\n  const [amountLeft, setAmountLeft] = useState(0);\n  const [showBudgetQuestion, setShowBudgetQuestion] = useState(true);\n  const [expenses, setExpenses] = useState([]);\n  const [newExpense, setNewExpense] = useState({});\n  const [createExpense, setCreateExpense] = useState(false);\n\n  useEffect(() => {\n\n    if (createExpense) {\n      setExpenses([\n        ...expenses,\n        newExpense\n      ])\n    }\n\n    const budgetLeft = amountLeft - newExpense.amount;\n    setAmountLeft(budgetLeft);\n    setCreateExpense(false);\n\n  }, [newExpense])\n\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Budget Controller</h1>\n        <div className=\"main-content content\">\n          {showBudgetQuestion ? (\n            <BudgetQuestion\n              setBudget={setBudget}\n              setAmountLeft={setAmountLeft}\n              setShowBudgetQuestion={setShowBudgetQuestion}\n            />\n          ) : (\n              <div className=\"row\">\n                <div className=\"one-half column\">\n                  <Form\n                    setNewExpense={setNewExpense}\n                    setCreateExpense={setCreateExpense}\n                  />\n                  <BudgetControl\n                    budget={budget}\n                    amountLeft={amountLeft}\n                  />\n                </div>\n                <div className=\"one-half column\">\n                  <ExpenseHistory\n                    expenses={expenses}\n                  />\n\n                </div>\n              </div>\n            )}\n\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}